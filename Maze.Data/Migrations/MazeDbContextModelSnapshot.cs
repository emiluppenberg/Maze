// <auto-generated />
using Maze.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Maze.DataAccess.Migrations
{
    [DbContext(typeof(MazeDbContext))]
    partial class MazeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Maze.DataAccess.Models.AIData", b =>
                {
                    b.Property<int>("AIDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AIDataId"));

                    b.Property<int>("MazeDataId")
                        .HasColumnType("int");

                    b.Property<int>("Steps")
                        .HasColumnType("int");

                    b.HasKey("AIDataId");

                    b.ToTable("AIs");
                });

            modelBuilder.Entity("Maze.DataAccess.Models.MazeData", b =>
                {
                    b.Property<int>("MazeDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MazeDataId"));

                    b.Property<int>("AIDataId")
                        .HasColumnType("int");

                    b.Property<int>("XLength")
                        .HasColumnType("int");

                    b.Property<int>("YLength")
                        .HasColumnType("int");

                    b.HasKey("MazeDataId");

                    b.HasIndex("AIDataId")
                        .IsUnique();

                    b.ToTable("MazeData");
                });

            modelBuilder.Entity("Maze.DataAccess.Models.MazeData", b =>
                {
                    b.HasOne("Maze.DataAccess.Models.AIData", "MyAIData")
                        .WithOne("MyMazeData")
                        .HasForeignKey("Maze.DataAccess.Models.MazeData", "AIDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MyAIData");
                });

            modelBuilder.Entity("Maze.DataAccess.Models.AIData", b =>
                {
                    b.Navigation("MyMazeData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
