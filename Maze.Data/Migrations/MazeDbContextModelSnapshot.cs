// <auto-generated />
using Maze.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Maze.DataAccess.Migrations
{
    [DbContext(typeof(MazeDbContext))]
    partial class MazeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Maze.DataAccess.Models.AI", b =>
                {
                    b.Property<int>("AIId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AIId"));

                    b.Property<int>("Steps")
                        .HasColumnType("int");

                    b.HasKey("AIId");

                    b.ToTable("AIs");
                });

            modelBuilder.Entity("Maze.DataAccess.Models.MazeData", b =>
                {
                    b.Property<int>("MazeDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MazeDataId"));

                    b.Property<int>("AIId")
                        .HasColumnType("int");

                    b.Property<int>("XLength")
                        .HasColumnType("int");

                    b.Property<int>("YLength")
                        .HasColumnType("int");

                    b.HasKey("MazeDataId");

                    b.HasIndex("AIId");

                    b.ToTable("MazeData");
                });

            modelBuilder.Entity("Maze.DataAccess.Models.MazeData", b =>
                {
                    b.HasOne("Maze.DataAccess.Models.AI", "MyAI")
                        .WithMany()
                        .HasForeignKey("AIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyAI");
                });
#pragma warning restore 612, 618
        }
    }
}
